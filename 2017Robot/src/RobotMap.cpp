// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"


// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<CANTalon> RobotMap::chassisFrontLeft;
std::shared_ptr<CANTalon> RobotMap::chassisFrontRight;
std::shared_ptr<CANTalon> RobotMap::chassisBackLeft;
std::shared_ptr<CANTalon> RobotMap::chassisBackRight;
std::shared_ptr<RobotDrive> RobotMap::chassisRobotDrive;


//std::shared_ptr<Encoder> RobotMap::shooterEncoder;
std::shared_ptr<CANTalon> RobotMap::shooterMotor;
std::shared_ptr<Counter> RobotMap::shooterRampCounter;
std::shared_ptr<AnalogTrigger> RobotMap::shooterRampTrigger;
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
std::shared_ptr<SpeedController> RobotMap::climberMotor1;
std::shared_ptr<SpeedController> RobotMap::climberMotor2;
std::shared_ptr<SpeedController> RobotMap::intakeMotor;
std::shared_ptr<CANTalon> RobotMap::shooterRamp;
std::shared_ptr<SpeedController> RobotMap::blenderMotor;

void RobotMap::init() {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    LiveWindow *lw = LiveWindow::GetInstance();

    chassisFrontLeft.reset(new CANTalon(2));//
    lw->AddActuator("Chassis", "FrontLeft", chassisFrontLeft);
    
    chassisFrontRight.reset(new CANTalon(4));//
    lw->AddActuator("Chassis", "FrontRight", chassisFrontRight);
    
    chassisBackLeft.reset(new CANTalon(3));//
    lw->AddActuator("Chassis", "BackLeft", chassisBackLeft);
    
    chassisBackRight.reset(new CANTalon(1));//
    lw->AddActuator("Chassis", "BackRight", chassisBackRight);
    
    chassisRobotDrive.reset(new RobotDrive(chassisFrontLeft, chassisBackLeft,
              chassisFrontRight, chassisBackRight));
    
    chassisRobotDrive->SetSafetyEnabled(true);
        chassisRobotDrive->SetExpiration(0.1);
        chassisRobotDrive->SetSensitivity(0.5);
        chassisRobotDrive->SetMaxOutput(1.0);
        chassisRobotDrive->SetInvertedMotor(RobotDrive::kFrontLeftMotor, true);
        //chassisRobotDrive->SetInvertedMotor(RobotDrive::kFrontRightMotor, true);
        //chassisRobotDrive->SetInvertedMotor(RobotDrive::kRearLeftMotor, true);
        chassisRobotDrive->SetInvertedMotor(RobotDrive::kRearRightMotor, true);

    shooterMotor.reset(new CANTalon(5));
    shooterRampTrigger.reset(new AnalogTrigger(3));
    shooterRampTrigger->SetLimitsVoltage(3.5, 3.8);
    shooterRampCounter.reset(new Counter(shooterRampTrigger.get()));
    shooterRamp.reset(new CANTalon(0));

    climberMotor1.reset(new VictorSP(2));
    climberMotor2.reset(new VictorSP(3));
    intakeMotor.reset(new VictorSP(1));
    blenderMotor.reset(new VictorSP(0));
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
