// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Chassis.h"
#include "../RobotMap.h"
#include "../Commands/DriveWithJoystick.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Chassis::Chassis() : Subsystem("Chassis") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    frontLeft = RobotMap::chassisFrontLeft;
    frontRight = RobotMap::chassisFrontRight;
    backLeft = RobotMap::chassisBackLeft;
    backRight = RobotMap::chassisBackRight;
    robotDrive = RobotMap::chassisRobotDrive;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    flippedDirection=false;

}

void Chassis::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new DriveWithJoystick());
}


// Put methods for controlling this subsystem
// here. Call these from Commands.
void Chassis::FlipDirection(){
	flippedDirection = !flippedDirection;
}
bool Chassis::IsFlipped(){
	return flippedDirection;
}
double Chassis::GetBLSpeed(){
	return backLeft->Get();
}
double Chassis::GetBRSpeed(){
	return backRight->Get();
}
double Chassis::GetFLSpeed(){
	return frontLeft->Get();
}
double Chassis::GetFRSpeed(){

	return frontRight->Get();
}
void Chassis::SetBLSpeed(double speed){
	return backLeft->Set(speed);
}
void Chassis::SetBRSpeed(double speed){
	return backRight->Set(speed);
}
void Chassis::SetFLSpeed(double speed){
	return frontLeft->Set(speed);
}
void Chassis::SetFRSpeed(double speed){

	return frontRight->Set(speed);
}
void Chassis::CartesianDrive(double x, double y, double rotation, bool squaredinputs){
	y*=-1;
	rotation*=-1;
	if(!squaredinputs){
		robotDrive->MecanumDrive_Cartesian(x, y, rotation);
	}
	else{
		robotDrive->MecanumDrive_Cartesian(x * std::abs(x), y * std::abs(y), rotation * std::abs(rotation));

	}
}

double Chassis::GetBLVolt(){
	return backLeft->GetOutputVoltage();
}
double Chassis::GetBRVolt(){
	return backRight->GetOutputVoltage();
}
double Chassis::GetFLVolt(){
	return frontLeft->GetOutputVoltage();
}
double Chassis::GetFRVolt(){

	return frontRight->GetOutputVoltage();
}
