// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.

#include "Camera.h"
#include "../RobotMap.h"
#include "../Commands/UpdateCamera.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Camera::Camera() :
		Subsystem("Camera") {
	wire.reset(new I2C(I2C::Port::kOnboard, 8));
	angularOffset = 0;
	xOffset = 0;
	yOffset = 0;
	blocks = 0;
}

void Camera::InitDefaultCommand() {
	SetDefaultCommand(new UpdateCamera());
}

void Camera::Update() {
	uint8_t buffer[3 * sizeof(float)];
	float temp;
	wire->ReadOnly(3 * sizeof(float), &buffer[0]);
	std::memcpy(&temp, &buffer[0], sizeof(float));
	blocks = temp;
	std::memcpy(&temp, &buffer[1 * sizeof(float)], sizeof(float));
	double visionX = temp;
	std::memcpy(&temp, &buffer[2 * sizeof(float)], sizeof(float));
	double visionY = temp;
	xOffset = 0;
	yOffset =visionY;
	angularOffset = std::atan(.55 * (100 - visionX) /  (16150 / (visionY + 36)));
}

void Camera::PrintValues() {
	SmartDashboard::PutNumber("y Offset", yOffset);
	SmartDashboard::PutNumber("x Offset", xOffset);
	SmartDashboard::PutNumber("angular offset", angularOffset * 180 / M_PI);
	SmartDashboard::PutNumber("blocks", blocks);
}

void Camera::UpdatePixy() {
	uint8_t intBuffer[14];
	uint8_t buffer[14];
	wire->ReadOnly(14, &intBuffer[0]);
	for (int i = 0; i < 14; i += 2) {
		std::memcpy(&intBuffer[i+1], &buffer[i], 1);
		std::memcpy(&intBuffer[i], &buffer[i + 1], 1);
	}
	for(int i = 0; i < 14; i+=2){
		uint16_t temp;
		std::memcpy(&temp, &intBuffer[i], 2);
		SmartDashboard::PutNumber("byteNumber" + std::to_string(i), temp);
	}

}

// Put methods for controlling this subsystem
// here. Call these from Commands.

